apiVersion: v1
kind: ConfigMap
metadata:
  name: account-postgres-sink-config
  namespace: helium
data:
  config.json: |
    {
      "configs": [
        {
          "programId": "1atrmQs3eq1N2FEYWu6tyTXbCjP4uQwExpjtnhXtS8h",
          "accounts": [
            {
              "type": "LazyTransactionsV0",
              "table": "lazy_transactions",
              "schema": "public"
            },
            { "type": "Block", "table": "blocks", "schema": "public" }
          ]
        },
        {
          "programId": "hvsrNC3NKbcryqDs2DocYHZ9yPKEVzdSjQG6RVtK1s8",
          "accounts": [
            { "type": "PositionV0", "table": "positions", "schema": "public" },
            { "type": "Registrar", "table": "registrars", "schema": "public" },
            { "type": "VoteMarkerV0", "table": "vote_markers", "schema": "public", "ignore_deletes": true }
          ],
          "crons": [
            { "schedule": "10 0 * * *", "type": "integrity-check" }
          ]
        },
        {
          "programId": "hdaoVTCqhfHHo75XdAMxBKdUqvq1i5bF23sisBqVgGR",
          "accounts": [
            { "type": "DaoV0", "table": "daos", "schema": "public" },
            { "type": "SubDaoV0", "table": "sub_daos", "schema": "public" },
            {
              "type": "SubDaoEpochInfoV0",
              "table": "sub_dao_epoch_infos",
              "schema": "public"
            },
            {
              "type": "DaoEpochInfoV0",
              "table": "dao_epoch_infos",
              "schema": "public"
            },
            {
              "type": "DelegatedPositionV0",
              "table": "delegated_positions",
              "schema": "public"
            }
          ],
          "crons": [
            { "schedule": "10 0 * * *", "type": "integrity-check" }
          ]
        },
        {
          "programId": "circAbx64bbsscPbQzZAUvuXpHqrCe6fLMzc2uKXz9g",
          "accounts": [
            {
              "type": "MintWindowedCircuitBreakerV0",
              "table": "mint_windowed_circuit_breaker_configs",
              "schema": "public"
            },
            {
              "type": "AccountWindowedCircuitBreakerV0",
              "table": "account_windowed_circuit_breaker_configs",
              "schema": "public"
            }
          ]
        },
        {
          "programId": "hemjuPXBpNvggtaUnN1MwT3wrdhttKEfosTcc2P9Pg8",
          "accounts": [
            {
              "type": "DataOnlyConfigV0",
              "table": "data_only_configs",
              "schema": "public"
            },
            {
              "type": "RewardableEntityConfigV0",
              "table": "rewardable_entity_configs",
              "schema": "public"
            },
            { "type": "MakerV0", "table": "makers", "schema": "public" },
            {
              "type": "MakerApprovalV0",
              "table": "maker_approvals",
              "schema": "public"
            },
            {
              "type": "KeyToAssetV0",
              "table": "key_to_assets",
              "schema": "public",
              "plugins": [
                {
                  "type": "EncodeEntityKey",
                  "config": {
                    "field": "entity_key"
                  }
                }
              ]
            },
            {
              "type": "IotHotspotInfoV0",
              "table": "iot_hotspot_infos",
              "schema": "public",
              "plugins": [
                {
                  "type": "ExtractHexLocation",
                  "config": {
                    "field": "location"
                  }
                }
              ]
            },
            {
              "type": "MobileHotspotInfoV0",
              "table": "mobile_hotspot_infos",
              "schema": "public",
              "plugins": [
                {
                  "type": "ExtractHexLocation",
                  "config": {
                    "field": "location"
                  }
                }
              ]
            }
          ],
          "crons": [
            { "schedule": "10 0 * * *", "type": "integrity-check" }
          ]
        },
        {
          "programId": "1azyuavdMyvsivtNxPoz6SucD18eDHeXzFCUPq5XU7w",
          "accounts": [
            {
              "type": "LazyDistributorV0",
              "table": "lazy_distributors",
              "schema": "public"
            },
            {
              "type": "RecipientV0",
              "table": "recipients",
              "schema": "public",
              "batchSize": "20000",
              "plugins": [
                {
                  "type": "ExplodeRecipientDestinationOwnership",
                  "config": {}
                }
              ]
            }
          ]
        },
        {
          "programId": "nprx42sXf5rpVnwBWEdRg1d8tuCWsTuVLys1pRWwE6p",
          "accounts": [
            {
              "type": "ProxyAssignmentV0",
              "table": "proxy_assignments",
              "schema": "public",
              "ix_side_effects": [
                {
                  "ix": "unassign_proxy_v0",
                  "acc": "proxy_assignment",
                  "action": "delete"
                }
              ]
            }
          ],
          "crons": [
            { "schedule": "10 0 * * *", "type": "integrity-check" }
          ]
        },
        {
          "programId": "propFYxqmVcufMhk5esNMrexq2ogHbbC2kP9PU1qxKs",
          "accounts": [
            { "type": "ProposalV0", "table": "proposals", "schema": "public" }
          ],
          "crons": [
            { "schedule": "10 0 * * *", "type": "integrity-check" }
          ]
        },
        {
          "programId": "orgdXvHVLkWgBYerptASkAwkZAE563CJUu717dMNx5f",
          "accounts": [
            {
              "type": "OrganizationV0",
              "table": "organizations",
              "schema": "public"
            }
          ]
        },
        {
          "programId": "memMa1HG4odAFmUbGWfPwS1WWfK95k99F2YTkGvyxZr",
          "accounts": [
            {
              "type": "CarrierV0",
              "table": "carriers",
              "schema": "public"
            },
            {
              "type": "IncentiveEscrowProgramV0",
              "table": "incentive_escrow_programs",
              "schema": "public"
            }
          ]
        },
        {
          "programId": "we1cGnTxTkDP9Sk49dw1d3T7ik7V2NfnY4qDGCDHXfC",
          "accounts": [
            {
              "type": "WelcomePackV0",
              "table": "welcome_packs",
              "schema": "public"
            }
          ]
        },
        {
          "programId": "mfanLprNnaiP4RX9Zz1BMcDosYHCqnG24H1fMEbi9Gn",
          "accounts": [
            {
              "type": "MiniFanoutV0",
              "table": "mini_fanouts",
              "schema": "public",
              "plugins": [
                {
                  "type": "ExplodeMiniFanoutOwnership",
                  "config": {}
                }
              ]
            }
          ]
        }
      ],
      "indexConfigs": [
        "CREATE INDEX IF NOT EXISTS key_to_asset_asset_index ON key_to_assets(asset);",
        "CREATE INDEX IF NOT EXISTS key_to_asset_entity_key_index ON key_to_assets(entity_key);",
        "CREATE INDEX IF NOT EXISTS iot_hotspot_infos_asset_index ON iot_hotspot_infos(asset);",
        "CREATE INDEX IF NOT EXISTS mobile_hotspot_infos_asset_index ON mobile_hotspot_infos(asset);",
        "CREATE INDEX IF NOT EXISTS recipient_lazy_distributor_index ON recipients(lazy_distributor);",
        "CREATE INDEX IF NOT EXISTS recipient_asset_index ON recipients(asset);"
      ]
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: account-postgres-sink-service
  name: account-postgres-sink-service
  namespace: helium
spec:
  selector:
    matchLabels:
      app: account-postgres-sink-service
  replicas: 1
  template:
    metadata:
      labels:
        app: account-postgres-sink-service
        security-group: public-rds-access
    spec:
      serviceAccountName: public-monitoring-rds-monitoring-user-access
      containers:
        - name: account-postgres-sink-service
          image: public.ecr.aws/v0j6k5v6/account-postgres-sink-service:0.3.34
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: USE_SUBSTREAM
              value: "true"
            - name: SUBSTREAM_URL
              value: "https://accounts.mainnet.sol.streamingfast.io"
            - name: SUBSTREAM
              value: "https://spkg.io/v1/packages/solana_accounts_foundational/v0.1.1"
            - name: SUBSTREAM_API_KEY
              valueFrom:
                secretKeyRef:
                  name: substream-api-key
                  key: secret
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: refresh-password
                  key: password
            - name: PG_HOST
              value: monitoring-rds.cbhihwhsofyu.us-west-2.rds.amazonaws.com
            - name: PG_PORT
              value: "5432"
            - name: PG_USER
              value: monitoring
            - name: PG_POOL_SIZE
              value: "35"
            - name: AWS_REGION
              value: us-west-2
            - name: PG_DATABASE
              value: monitoring
            - name: PG_SSL_MODE
              value: no-verify
            - name: PHOTON_URL
              value: "http://geocoder-service-0.geocoder-service:8000"
            - name: SOLANA_URL
              valueFrom:
                secretKeyRef:
                  name: helius-rpc-url
                  key: secret
            - name: ASSET_API_URL
              valueFrom:
                secretKeyRef:
                  name: helius-rpc-url
                  key: secret
            - name: MAPBOX_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: mapbox-api-key
                  key: mapbox-api-key
            - name: PROGRAM_ACCOUNT_CONFIGS
              value: "/usr/src/app/config/config.json"
          volumeMounts:
            - name: account-postgres-sink-config
              mountPath: /usr/src/app/config
              readOnly: true
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
            limits:
              memory: 5Gi
      volumes:
        - name: account-postgres-sink-config
          configMap:
            name: account-postgres-sink-config
            items:
              - key: config.json
                path: config.json
---
apiVersion: v1
kind: Service
metadata:
  name: account-postgres-sink-service
  namespace: helium
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http
  selector:
    app: account-postgres-sink-service
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: account-postgres-sink-service
  namespace: helium
spec:
  ingressClassName: nginx
  rules:
    - host: account-sink.web.helium.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: account-postgres-sink-service
                port:
                  number: 3000

