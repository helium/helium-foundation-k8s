apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: metadata
  name: metadata
  namespace: helium
spec:
  selector:
    matchLabels:
      app: metadata
  template:
    metadata:
      labels:
        app: metadata
    spec:
      containers:
        - name: metadata
          image: public.ecr.aws/v0j6k5v6/entity-metadata-service:0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
              name: http
              protocol: TCP
          env:
            - name: COLLECTION_SYMBOL
              value: IOT
            - name: DNT_MINT
              valueFrom:
                configMapKeyRef:
                  name: globals
                  key: iot_mint
            - name: SOLANA_URL
              valueFrom:
                configMapKeyRef:
                  name: globals
                  key: solana_url
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 500Mi
            limits:
              cpu: 500m
              memory: 750Mi
---
apiVersion: v1
kind: Service
metadata:
  name: metadata
  namespace: helium
spec:
  ports:
    - port: 8081
      protocol: TCP
      targetPort: http
  selector:
    app: metadata
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metadata
  namespace: helium
spec:
  ingressClassName: nginx
  rules:
  - host: metadata.web.test-helium.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: metadata
            port:
              number: 8081
